module Paket2Bazel.Gen

open Paket
open FSharpx.Collections
open FSharpx
open System
open System.Text
open Paket2Bazel.Models
open System.IO

let generateTarget (group: Group) (repoName: string) (netrcLabel: string option) =
    let i = "    "
    let sb = new StringBuilder()
    sb.Append($"{i}nuget_repo(\n") |> ignore

    sb.Append($"{i}    name = \"{repoName}\",\n")
    |> ignore

    sb.Append($"{i}    packages = [\n") |> ignore

    for package in group.packages do
        // TODO: Handle multiple TFMS
        let packageDeps =
            package.dependencies
            |> Map.values
            |> Seq.head
            |> Seq.fold (fun state current -> state + $"\"{current}\", ") ""
            |> (fun s ->
                if String.IsNullOrEmpty(s) then
                    s
                else
                    s.Substring(0, s.Length - 2))

        let overrides =
            package.overrides
            |> Seq.fold (fun state current -> state + $"\"{current}\", ") ""
            |> (fun s ->
                if String.IsNullOrEmpty(s) then
                    s
                else
                    s.Substring(0, s.Length - 2))

        let sources =
            package.sources
            |> Seq.fold (fun state current -> state + $"\"{current}\", ") ""
            |> (fun s ->
                if String.IsNullOrEmpty(s) then
                    s
                else
                    s.Substring(0, s.Length - 2))

        let netrc =
            match netrcLabel with
            | Some (path) -> $"\"{path}\""
            | None -> "None"

        sb.Append(
            $"{i}        (\"{package.name}\", \"{package.version}\", \"{package.sha512sri}\", [{sources}], {netrc}, [{packageDeps}], [{overrides}]),\n"
        )
        |> ignore


    sb.Append($"{i}    ],\n") |> ignore
    sb.Append($"{i})\n") |> ignore

    sb.ToString()

let addFileHeaderContent (sb: StringBuilder) (fileName: string) =
    sb.Append($"\"Generated by paket2bazel\"\n")
    |> ignore

    sb.Append($"\n") |> ignore

    sb.Append("load(\"@rules_dotnet//dotnet:defs.bzl\", \"nuget_repo\")")
    |> ignore

    sb.Append("\n") |> ignore
    sb.Append("\n") |> ignore
    sb.Append($"def {fileName}():") |> ignore
    sb.Append("\n") |> ignore
    sb.Append($"    \"{fileName}\"") |> ignore
    sb.Append("\n") |> ignore

let addGroupToFileContent
    (sb: StringBuilder)
    (group: Group)
    (repoNamePrefix: string option)
    (netrcLabel: string option)
    =
    let repoName =
        match repoNamePrefix with
        | Some (prefix) -> $"{prefix}.{group.name.ToLower()}"
        | None -> group.name.ToLower()

    sb.Append(generateTarget group repoName netrcLabel)
    |> ignore

let generateBazelFiles (groups: Group seq) (separateFiles: bool) (outputFolder: string) (netrcLabel: string option) =
    if separateFiles then
        groups
        |> Seq.iter (fun group ->
            let sb = new StringBuilder()
            addFileHeaderContent sb group.name
            addGroupToFileContent sb group None netrcLabel
            File.WriteAllText($"{outputFolder}/{group.name.ToLower()}.bzl", sb.ToString()))
    else
        let sb = new StringBuilder()

        addFileHeaderContent sb "paket"

        groups
        |> Seq.sortBy (fun i -> i.name)
        |> Seq.iter (fun g -> addGroupToFileContent sb g (Some "paket") netrcLabel)

        File.WriteAllText($"{outputFolder}/paket.bzl", sb.ToString())
