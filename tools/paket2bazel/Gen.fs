module Paket2Bazel.Gen

open Paket
open FSharpx.Collections
open FSharpx
open System
open System.Text
open Paket2Bazel.Models

let generateTarget (group: Group) =
    let i = "    "
    let sb = new StringBuilder()
    sb.Append($"{i}nuget_repo(\n") |> ignore

    sb.Append($"{i}    name = \"paket.{group.name.ToLower()}\",\n")
    |> ignore

    sb.Append($"{i}    packages = [\n") |> ignore

    for package in group.packages do
        // TODO: Handle multiple TFMS
        let packageDeps =
            package.dependencies
            |> Map.values
            |> Seq.head
            |> Seq.fold (fun state current -> state + $"\"{current}\", ") ""
            |> (fun s -> if String.IsNullOrEmpty(s) then s else s.Substring(0, s.Length - 2))
        let overrides =
            package.overrides
            |> Seq.fold (fun state current -> state + $"\"{current}\", ") ""
            |> (fun s -> if String.IsNullOrEmpty(s) then s else s.Substring(0, s.Length - 2))
        sb.Append($"{i}        (\"{package.name}\", \"{package.version}\", \"{package.sha512sri}\", [{packageDeps}], [{overrides}]),\n")
        |> ignore


    sb.Append($"{i}    ],\n") |> ignore
    sb.Append($"{i})\n") |> ignore

    sb.ToString()

let generateBazelFile (groups: Group seq) =
    let sb = new StringBuilder()

    sb.Append($"\"Generated by paket2bazel\"\n")
    |> ignore

    sb.Append($"\n") |> ignore

    sb.Append("load(\"@rules_dotnet//dotnet:defs.bzl\", \"nuget_repo\")")
    |> ignore

    sb.Append("\n") |> ignore
    sb.Append("\n") |> ignore
    sb.Append("def paket():") |> ignore
    sb.Append("\n") |> ignore
    sb.Append("    \"paket\"") |> ignore
    sb.Append("\n") |> ignore

    groups
    |> Seq.sortBy (fun i -> i.name)
    |> Seq.map (fun g -> generateTarget g)
    |> Seq.iter (fun i -> i |> Seq.iter (fun x -> sb.Append(x) |> ignore))

    sb.ToString()
