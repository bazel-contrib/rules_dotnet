jobs:
- job: BuildAndTest  
  strategy:
    matrix:
      linux:
        poolName: 'Azure Pipelines'
        vmImage: 'ubuntu-16.04'       
        systemName: 'linux'
      windows:
        poolName: 'home'
        vmImage: ''
        systemName: 'windows'
      mac:
        poolName: 'Azure Pipelines'
        vmImage: 'macOS-10.13'
        systemName: 'mac'
  pool:
    name: $(poolName)
    vmImage: $(vmImage)

  steps:
    - task: DotNetCoreInstaller@0
      inputs:
        packageType: 'sdk' 
        version: '2.2.106' 
      displayName: 'Install dotnet on Window'
      condition: and(succeeded(), eq(variables['systemName'], 'windows'))

    - script: |
        echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install -y bazel
      displayName: 'Install dependencies'
      condition: and(succeeded(), eq(variables['systemName'], 'linux'))

    - script: |
        brew install bazel coreutils
      displayName: 'Install dependencies'
      condition: and(succeeded(), eq(variables['systemName'], 'mac'))
    - script: |
        brew cask install mono-mdk
      displayName: 'Install mono'
      condition: and(succeeded(), eq(variables['systemName'], 'mac'))
       
    - script: |
        bazel version
      displayName: 'Show bazel version'
    - script: |
        dotnet --info
      displayName: 'Show dotnet version'
    - script: |
        mono --version
      displayName: 'Show mono version'

    - script: |
        bazel clean --expunge 

    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //... 
      displayName: 'Build all'
    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello.exe
      displayName: 'Run sample hello'
    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:v2.1.200_hello-core.exe
      displayName: 'Run sample core hello'

    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //... 
      continueOnError: true
      displayName: 'Run tests'
    - powershell: |
        $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
        $template = Resolve-Path "tools/converttests/n3.xslt"
        $xslt.Load($template);
        function doProcess($file)
        {
          $result = [io.path]::GetDirectoryName($file) + "/" + [io.path]::GetFileNameWithoutExtension($file) + "-junit.xml" 
          echo "Processing $file to $result"
          [xml]$xml = Get-Content $file
          $n = Select-Xml "//testsuites" $xml 
          if ($n.count -gt 0) {
            echo "junit"
            copy-item $file $result
          } else {
            echo "Transforming"
            $xslt.Transform($file, $result)
          }        
        }
        gci -r bazel-out -filter "test*.xml" -exclude "*-junit.xml" | foreach { doProcess($_.FullName) }
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: 'bazel-testlogs/**/test-junit.xml' 
        testRunTitle: $(systemName)
        buildPlatform: $(systemName)
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional

    - script: |
        pwd
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //... 
      workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
      displayName: 'Run mono standalone test'

    - task: PowerShell@2
      displayName: 'Clone rules_dotnet_3rd_party if needed'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)'
        targetType: inline
        script: |
          if (-not (Test-Path -LiteralPath rules_dotnet_3rd_party)) {
            git clone https://github.com/tomaszstrejczek/rules_dotnet_3rd_party
          } 
          "Done"    
    - script: |
        git checkout -f
      workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
      displayName: 'Clean 3rd_party repo'
    - script: |
        git pull
      workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
      displayName: 'Pull 3rd_party repo'

    - script: |
        git submodule init
        git submodule update --recursive
      workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
      displayName: 'Update 3rd party repo'

    - task: PowerShell@2
      displayName: 'Patch WORKSPACE'
      inputs:
        workingDirectory: '$(Pipeline.Workspace)/rules_dotnet_3rd_party'
        targetType: inline
        script: |
          ((Get-Content -path WORKSPACE -Raw) -replace 'e1bce290ca52f707cfa10498c85729baf01002b1','$(Build.SourceVersion)') | Set-Content -Path WORKSPACE
          "Done"    

    - script: |
        bazel clean --expunge 
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //... 
      workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
      displayName: 'Run 3rd_party build'

    - script: |
        bazel shutdown 
      workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
      displayName: 'Bazel shutdown'
