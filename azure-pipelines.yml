jobs:
- job: Windows
  pool:
    name: 'home'
  steps:
    - script: |
        bazel version
        dotnet --info
        choco --version
      displayName: 'Show env'
    - script: |
        bazel ^
        build ^
        -s ^
        //...
      displayName: 'Build all'
    - script: |
        bazel ^
        run ^
        -s ^
        //tests/examples/example_binary:hello
      displayName: 'Run sample hello'
    - script: |
        bazel ^
        run ^
        -s ^
        //tests/examples/example_binary:hello-core
      displayName: 'Run sample core hello'
    - script: |
        bazel ^
        run ^
        -s ^
        //tests/examples/example_binary:hello-net
      displayName: 'Run sample .net hello'
    - script: |
        bazel ^
        test ^
        -s ^
        --test_summary=detailed ^
        --test_output=all ^
        //...
      continueOnError: true
      displayName: 'Run tests'
    - powershell: |
        $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
        $template = Resolve-Path "tools\converttests\n3.xslt"
        $xslt.Load($template);
        function doProcess($file)
        {
          $result = [io.path]::GetDirectoryName($file) + "\" + [io.path]::GetFileNameWithoutExtension($file) + "-junit.xml" 
          echo "Processing $file to $result"
          [xml]$xml = Get-Content $file
          $n = Select-Xml "//testsuites" $xml 
          if ($n.count -gt 0) {
            echo "junit"
            copy-item $file $result
          } else {
            echo "Transforming"
            $xslt.Transform($file, $result)
          }        
        }
        gci -r . -filter "test*.xml" -exclude "*-junit.xml" | foreach { doProcess($_.FullName) }

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: 'bazel-testlogs/**/test-junit.xml' 
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional

- job: macOS
  pool:
      vmImage: macOS-10.13
  steps:
    - script: |
        brew install bazel coreutils
      displayName: 'Install dependencies'
    - script: |
        bazel version
        dotnet --info
        mono --version
      displayName: 'Show env'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //...
      displayName: 'Build all'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello
      displayName: 'Run sample hello'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello-core
      displayName: 'Run sample core hello'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //...
      continueOnError: true
      displayName: 'Run tests'
    - powershell: |
        $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
        $template = Resolve-Path "tools/converttests/n3.xslt"
        $xslt.Load($template);
        function doProcess($file)
        {
          $result = [io.path]::GetDirectoryName($file) + "/" + [io.path]::GetFileNameWithoutExtension($file) + "-junit.xml" 
          echo "Processing $file to $result"
          [xml]$xml = Get-Content $file
          $n = Select-Xml "//testsuites" $xml 
          if ($n.count -gt 0) {
            echo "junit"
            copy-item $file $result
          } else {
            echo "Transforming"
            $xslt.Transform($file, $result)
          }        
        }
        gci -r . -filter "test*.xml" -exclude "*-junit.xml" | foreach { doProcess($_.FullName) }
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: 'bazel-testlogs/**/test-junit.xml' 
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional

- job: linux
  pool:
      vmImage: ubuntu-16.04
  steps:
    - script: |
        echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install -y bazel
      displayName: 'Install dependencies'
    - script: |
        bazel version
        dotnet --info
        mono --version
      displayName: 'Show env'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //...
      displayName: 'Build all'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello
      displayName: 'Run sample hello'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello-core
      displayName: 'Run sample core hello'
    - script: |
        bazel --batch --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //...
      continueOnError: true
      displayName: 'Run tests'
    - powershell: |
        $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
        $template = Resolve-Path "tools/converttests/n3.xslt"
        $xslt.Load($template);
        function doProcess($file)
        {
          $result = [io.path]::GetDirectoryName($file) + "/" + [io.path]::GetFileNameWithoutExtension($file) + "-junit.xml" 
          echo "Processing $file to $result"
          [xml]$xml = Get-Content $file
          $n = Select-Xml "//testsuites" $xml 
          if ($n.count -gt 0) {
            echo "junit"
            copy-item $file $result
          } else {
            echo "Transforming"
            $xslt.Transform($file, $result)
          }        
        }
        gci -r . -filter "test*.xml" -exclude "*-junit.xml" | foreach { doProcess($_.FullName) }
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: 'bazel-testlogs/**/test-junit.xml' 
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional
